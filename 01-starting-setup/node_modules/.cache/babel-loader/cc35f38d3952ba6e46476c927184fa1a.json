{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LocalAdmin\\\\Documents\\\\Personal\\\\React\\\\01-starting-setup\\\\src\\\\components\\\\NewExpense\\\\ExpenseForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./ExpenseForm.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExpenseForm = props => {\n  _s();\n  const [enteredTitle, setEnteredTitle] = useState(\"\");\n  const [enteredAmount, setEnteredAmount] = useState(\"\");\n  const [enteredDate, setEnteredDate] = useState(\"\");\n  const [enteredShowForm, setenteredShowForm] = useState(false);\n\n  //   const [userInput, setUserInput] = useState({\n  //     enteredTitle: \"\",\n  //     enteredAmount: \"\",\n  //     enteredDate: \"\",\n  //   });\n\n  const titleChangeHandler = event => {\n    setEnteredTitle(event.target.value);\n    // setUserInput({\n    //     //Using a spreader might fail in certain scenarios thus,\n    //     //might not be such a good solution for this use case.\n    //     ...userInput,\n    //     enteredTitle: event.target.value,\n    // })\n    // setUserInput((prevState) => {\n    //     return {...prevState, enteredTitle: event.target.value}\n    // })\n  };\n  //Whenever I'm updateing the state and is depending on the previous\n  //state; pass in a function in the setUserInput\n\n  const amountChangeHandler = event => {\n    setEnteredAmount(event.target.value);\n    // setUserInput({\n    //     ...userInput,\n    //     enteredAmount: event.target.value,\n    // })\n    //If the state depends on the previous state, use this syntax.\n    //Otherwise, if there are many values, some might be forgotten.\n    // setUserInput((prevState) => {\n    //     return {...prevState, enteredAmount: event.target.value}\n    // })\n  };\n\n  const dateChangeHandler = event => {\n    setEnteredDate(event.target.value);\n    // setUserInput({\n    //     ...userInput,\n    //     enteredDate: event.target.value,\n    // })\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    const expenseData = {\n      title: enteredTitle,\n      amount: enteredAmount,\n      date: new Date(enteredDate)\n    };\n    // console.log(expenseData)\n    //Here we reset the values after they have been submitted\n    //with the value and function in the JSX, it is called\n    //two way binding!!\n    props.onSaveExpenseData(expenseData);\n    setEnteredTitle(\"\");\n    setEnteredAmount(\"\");\n    setEnteredDate(\"\");\n  };\n  const showExpenseForm = () => {\n    console.log(\"expenseForm is clicked\");\n    if (enteredShowForm === true) {\n      setenteredShowForm(false);\n      console.log(enteredShowForm);\n      return /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Not show\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this);\n    } else {\n      setenteredShowForm(true);\n      console.log(enteredShowForm);\n      return /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"SHow much\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this);\n    }\n    console.log(enteredShowForm);\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: submitHandler,\n    children: showExpenseForm\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n_s(ExpenseForm, \"TWUpl+/O+83Qvwa/IngsqI7uLl0=\");\n_c = ExpenseForm;\n{/* <div className=\"new-expense__controls\">\r\n        <div className=\"new-expense__control\">\r\n          <label>Title</label>\r\n          <input\r\n            type=\"text\"\r\n            value={enteredTitle}\r\n            onChange={titleChangeHandler}\r\n          />\r\n        </div>\r\n        <div className=\"new-expense__control\">\r\n          <label>Amount</label>\r\n          <input\r\n            type=\"number\"\r\n            min=\"0.01\"\r\n            step=\"0.01\"\r\n            onChange={amountChangeHandler}\r\n            value={enteredAmount}\r\n          />\r\n        </div>\r\n        <div className=\"new-expense__control\">\r\n          <label>Date</label>\r\n          <input\r\n            type=\"date\"\r\n            value={enteredDate}\r\n            min=\"2019-01-01\"\r\n            max=\"2022-12-31\"\r\n            onChange={dateChangeHandler}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"new-expense__actions\">\r\n        <button onClick={showExpenseForm}>Cancel</button>\r\n        <button type=\"submit\">Add expense</button>\r\n      </div> */}\nexport default ExpenseForm;\nvar _c;\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"names":["React","useState","ExpenseForm","props","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","enteredShowForm","setenteredShowForm","titleChangeHandler","event","target","value","amountChangeHandler","dateChangeHandler","submitHandler","preventDefault","expenseData","title","amount","date","Date","onSaveExpenseData","showExpenseForm","console","log"],"sources":["C:/Users/LocalAdmin/Documents/Personal/React/01-starting-setup/src/components/NewExpense/ExpenseForm.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./ExpenseForm.css\";\r\n\r\nconst ExpenseForm = (props) => {\r\n  const [enteredTitle, setEnteredTitle] = useState(\"\");\r\n  const [enteredAmount, setEnteredAmount] = useState(\"\");\r\n  const [enteredDate, setEnteredDate] = useState(\"\");\r\n  const [enteredShowForm, setenteredShowForm] = useState(false);\r\n\r\n  //   const [userInput, setUserInput] = useState({\r\n  //     enteredTitle: \"\",\r\n  //     enteredAmount: \"\",\r\n  //     enteredDate: \"\",\r\n  //   });\r\n\r\n  const titleChangeHandler = (event) => {\r\n    setEnteredTitle(event.target.value);\r\n    // setUserInput({\r\n    //     //Using a spreader might fail in certain scenarios thus,\r\n    //     //might not be such a good solution for this use case.\r\n    //     ...userInput,\r\n    //     enteredTitle: event.target.value,\r\n    // })\r\n    // setUserInput((prevState) => {\r\n    //     return {...prevState, enteredTitle: event.target.value}\r\n    // })\r\n  };\r\n  //Whenever I'm updateing the state and is depending on the previous\r\n  //state; pass in a function in the setUserInput\r\n\r\n  const amountChangeHandler = (event) => {\r\n    setEnteredAmount(event.target.value);\r\n    // setUserInput({\r\n    //     ...userInput,\r\n    //     enteredAmount: event.target.value,\r\n    // })\r\n    //If the state depends on the previous state, use this syntax.\r\n    //Otherwise, if there are many values, some might be forgotten.\r\n    // setUserInput((prevState) => {\r\n    //     return {...prevState, enteredAmount: event.target.value}\r\n    // })\r\n  };\r\n\r\n  const dateChangeHandler = (event) => {\r\n    setEnteredDate(event.target.value);\r\n    // setUserInput({\r\n    //     ...userInput,\r\n    //     enteredDate: event.target.value,\r\n    // })\r\n  };\r\n  const submitHandler = (event) => {\r\n    event.preventDefault();\r\n    const expenseData = {\r\n      title: enteredTitle,\r\n      amount: enteredAmount,\r\n      date: new Date(enteredDate),\r\n    };\r\n    // console.log(expenseData)\r\n    //Here we reset the values after they have been submitted\r\n    //with the value and function in the JSX, it is called\r\n    //two way binding!!\r\n    props.onSaveExpenseData(expenseData);\r\n    setEnteredTitle(\"\");\r\n    setEnteredAmount(\"\");\r\n    setEnteredDate(\"\");\r\n  };\r\n\r\n  const showExpenseForm = () => {\r\n    console.log(\"expenseForm is clicked\");\r\n    if (enteredShowForm === true) {\r\n      setenteredShowForm(false);\r\n      console.log(enteredShowForm);\r\n      return(\r\n        <h1>Not show</h1>\r\n      )\r\n    } else {\r\n      setenteredShowForm(true);\r\n      console.log(enteredShowForm);\r\n      return(\r\n        <h1>SHow much</h1>\r\n      )\r\n    }\r\n    console.log(enteredShowForm);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={submitHandler}>\r\n      {showExpenseForm}\r\n    </form>\r\n  );\r\n};\r\n\r\n{/* <div className=\"new-expense__controls\">\r\n        <div className=\"new-expense__control\">\r\n          <label>Title</label>\r\n          <input\r\n            type=\"text\"\r\n            value={enteredTitle}\r\n            onChange={titleChangeHandler}\r\n          />\r\n        </div>\r\n        <div className=\"new-expense__control\">\r\n          <label>Amount</label>\r\n          <input\r\n            type=\"number\"\r\n            min=\"0.01\"\r\n            step=\"0.01\"\r\n            onChange={amountChangeHandler}\r\n            value={enteredAmount}\r\n          />\r\n        </div>\r\n        <div className=\"new-expense__control\">\r\n          <label>Date</label>\r\n          <input\r\n            type=\"date\"\r\n            value={enteredDate}\r\n            min=\"2019-01-01\"\r\n            max=\"2022-12-31\"\r\n            onChange={dateChangeHandler}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"new-expense__actions\">\r\n        <button onClick={showExpenseForm}>Cancel</button>\r\n        <button type=\"submit\">Add expense</button>\r\n      </div> */}\r\n\r\nexport default ExpenseForm;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,mBAAmB;AAAC;AAE3B,MAAMC,WAAW,GAAIC,KAAK,IAAK;EAAA;EAC7B,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACK,aAAa,EAAEC,gBAAgB,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACO,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACS,eAAe,EAAEC,kBAAkB,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;;EAE7D;EACA;EACA;EACA;EACA;;EAEA,MAAMW,kBAAkB,GAAIC,KAAK,IAAK;IACpCR,eAAe,CAACQ,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;IACnC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACF,CAAC;EACD;EACA;;EAEA,MAAMC,mBAAmB,GAAIH,KAAK,IAAK;IACrCN,gBAAgB,CAACM,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;IACpC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACF,CAAC;;EAED,MAAME,iBAAiB,GAAIJ,KAAK,IAAK;IACnCJ,cAAc,CAACI,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;IAClC;IACA;IACA;IACA;EACF,CAAC;;EACD,MAAMG,aAAa,GAAIL,KAAK,IAAK;IAC/BA,KAAK,CAACM,cAAc,EAAE;IACtB,MAAMC,WAAW,GAAG;MAClBC,KAAK,EAAEjB,YAAY;MACnBkB,MAAM,EAAEhB,aAAa;MACrBiB,IAAI,EAAE,IAAIC,IAAI,CAAChB,WAAW;IAC5B,CAAC;IACD;IACA;IACA;IACA;IACAL,KAAK,CAACsB,iBAAiB,CAACL,WAAW,CAAC;IACpCf,eAAe,CAAC,EAAE,CAAC;IACnBE,gBAAgB,CAAC,EAAE,CAAC;IACpBE,cAAc,CAAC,EAAE,CAAC;EACpB,CAAC;EAED,MAAMiB,eAAe,GAAG,MAAM;IAC5BC,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;IACrC,IAAIlB,eAAe,KAAK,IAAI,EAAE;MAC5BC,kBAAkB,CAAC,KAAK,CAAC;MACzBgB,OAAO,CAACC,GAAG,CAAClB,eAAe,CAAC;MAC5B,oBACE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAiB;IAErB,CAAC,MAAM;MACLC,kBAAkB,CAAC,IAAI,CAAC;MACxBgB,OAAO,CAACC,GAAG,CAAClB,eAAe,CAAC;MAC5B,oBACE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAkB;IAEtB;IACAiB,OAAO,CAACC,GAAG,CAAClB,eAAe,CAAC;EAC9B,CAAC;EAED,oBACE;IAAM,QAAQ,EAAEQ,aAAc;IAAA,UAC3BQ;EAAe;IAAA;IAAA;IAAA;EAAA,QACX;AAEX,CAAC;AAAC,GAvFIxB,WAAW;AAAA,KAAXA,WAAW;AAyFjB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAjCC;AAmCD,eAAeA,WAAW;AAAC;AAAA"},"metadata":{},"sourceType":"module"}